% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ParaDRAM.R
\name{ParaDRAM}
\alias{ParaDRAM}
\title{An \code{\link{R6}} \code{ParaDRAM} class for \link{paramonte} package usage}
\description{
This is the \code{ParaDRAM} class to generate instances of \strong{serial} and \strong{parallel} \strong{Delayed-Rejection Adaptive Metropolis-Hastings}
\strong{Markov Chain Monte Carlo} sampler class of the \code{\link{paramonte}} library. The \code{ParaDRAM} class is a child of the \code{\link{ParaMonteSampler}}
class.

All \code{ParaDRAM} class attributes are optional and all attributes can be set after a \code{ParaDRAM} instance is returned by the class
constructor.

Once you set the optional attributes to your desired values, call the ParaDRAM sampler via the object's method \code{runSampler()}.
\itemize{
\item \strong{Example serial usage}

Copy and paste the following code in your R session:\preformatted{getLogFunc = function(point) \{
    # return the log of a multivariate Normal
    # density function with ndim dimensions
    return( -0.5 * np.dot(point, point) )
\}
pmpd = ParaDRAM$new()
pmpd$runSampler ( ndim = 4, # assume 4-dimensional objective function
                  getLogFunc = getLogFunc    # the objective function
)
}

where,
\itemize{
\item \code{ndim}

represents the number of dimensions of the domain of the user’s objective function \code{getLogFunc(point)} and,
\item \code{getLogFunc(point)}

represents the user’s objective function to be sampled, which must take a single input argument \code{point} of type vector of length
\code{ndim} and must return the natural logarithm of the objective function.
}
\item \strong{Example parallel usage}
\itemize{
\item TO_DO_LATER entire section
}

Copy and paste the following code in your R session:\preformatted{TO_DO_LATER
}

where,
\itemize{
\item \code{ndim}

represents the number of dimensions of the domain of the user’s objective function \code{getLogFunc(point)} and,
\item \code{getLogFunc(point)}

represents the user’s objective function to be sampled, which must take a single input argument \code{point} of type vector of length
\code{ndim} and must return the natural logarithm of the objective function.
\item \code{mpiEnabled}

is a logical (boolean) indicator that, if \code{TRUE}, will cause the ParaDRAM simulation to run in parallel on the requested number
of processors. The default value is \code{FALSE}.
}
}
\subsection{Note}{
\itemize{
\item TO_DO_LATER entire section
}
}

\subsection{Tips on parallel usage}{
\itemize{
\item TO_DO_LATER entire section
}
}

\subsection{ParaDRAM Class Attributes}{

See also:
\itemize{
\item \url{https://www.cdslab.org/paramonte/notes/usage/paradram/specifications/}
}

All input specifications (attributes) of a ParaDRAM simulation are optional. However, it is recommended that you provide as much
information as possible about the specific ParaDRAM simulation and the objective function to be sampled via ParaDRAM simulation
specifications.

The ParaDRAM simulation specifications have lengthy comprehensive descriptions that appear in full in the output report file of
every ParaDRAM simulation.
\itemize{
\item The best way to learn about individual ParaDRAM simulation attributes is to a run a minimal serial simulation with the following
R script,\preformatted{pmpd = ParaDRAM()
pmpd$spec$outputFileName = "./test"
getLogFunc = function(point)\{
    return( -sum(point**2) )
\}
pmpd$runSampler( ndim = 1, getLogFunc = getLogFunc )
}
}

Running this code will generate a set of simulation output files (in the current working directory of R) that begin with the
prefix test_process_1. Among these, the file test_process_1_report.txt contains the full description of all input specifications
of the ParaDRAM simulation as well as other information about the simulation results and statistics.
}

\subsection{Parameters}{

None. The simulation specifications can be set once an object is instantiated. All simulation specification descriptions are
collectively available at:
\itemize{
\item \url{https://www.cdslab.org/paramonte/notes/usage/paradram/specifications/}
}

Note that this is the new interface. The previous ParaDRAM class interface used to optionally take all simulation specifications
as input. However, overtime, this approach has become more of liability than any potential benefit. All simulation specifications
have to be now to be set solely after a ParaDRAM object is instantiated, instead of setting the specifications via the ParaDRAM
class constructor.
}
}
\section{Super class}{
\code{\link[paramonte:ParaMonteSampler]{paramonte::ParaMonteSampler}} -> \code{ParaDRAM}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ParaDRAM$new()}}
\item \href{#method-print}{\code{ParaDRAM$print()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="paramonte" data-topic="ParaMonteSampler" data-id="readChain">}\href{../../paramonte/html/ParaMonteSampler.html#method-readChain}{\code{paramonte::ParaMonteSampler$readChain()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paramonte" data-topic="ParaMonteSampler" data-id="readMarkovChain">}\href{../../paramonte/html/ParaMonteSampler.html#method-readMarkovChain}{\code{paramonte::ParaMonteSampler$readMarkovChain()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paramonte" data-topic="ParaMonteSampler" data-id="readProgress">}\href{../../paramonte/html/ParaMonteSampler.html#method-readProgress}{\code{paramonte::ParaMonteSampler$readProgress()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paramonte" data-topic="ParaMonteSampler" data-id="readReport">}\href{../../paramonte/html/ParaMonteSampler.html#method-readReport}{\code{paramonte::ParaMonteSampler$readReport()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paramonte" data-topic="ParaMonteSampler" data-id="readRestart">}\href{../../paramonte/html/ParaMonteSampler.html#method-readRestart}{\code{paramonte::ParaMonteSampler$readRestart()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paramonte" data-topic="ParaMonteSampler" data-id="readSample">}\href{../../paramonte/html/ParaMonteSampler.html#method-readSample}{\code{paramonte::ParaMonteSampler$readSample()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Instantiates a \code{ParaDRAM} class object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ParaDRAM$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Returns a new \code{ParaDRAM} class object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Prints \code{ParaDRAM} object usage.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ParaDRAM$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Prints \code{ParaDRAM} object usage.
}
}
}
